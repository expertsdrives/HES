
@{
    ViewBag.Title = "Index";

}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script src="https://unpkg.com/tokml/tokml.min.js"></script> <!-- For KML parsing -->
<script src="https://unpkg.com/jszip/dist/jszip.min.js"></script> <!-- For handling KMZ -->
<script src="https://unpkg.com/leaflet-filelayer/leaflet.filelayer.js"></script> <!-- For loading files -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/togeojson/0.16.0/togeojson.min.js"></script>
<script src='https://api.mapbox.com/mapbox.js/plugins/leaflet-fullscreen/v1.0.1/Leaflet.fullscreen.min.js'></script>
<link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-fullscreen/v1.0.1/leaflet.fullscreen.css' rel='stylesheet' />

<style>
    #map {
        height: 800px;
        width: 100%;
    }
</style>
<div class="card card-block card-stretch card-height">
    <div class="card-header" style="text-align:center">
        <div class="header-title">
            <label for="startDate">Start Date:</label>
            <input type="date" id="startDate" class="date-picker" />
            <label for="endDate">End Date:</label>
            <input type="date" id="endDate" class="date-picker" />
            <select id="myDropdown" class="dropdown-bg">
                <option value="All">All</option>
                <option value="CA01 - Vimla Devi Rice Mill">CA01 - Vimla Devi Rice Mill</option>
                <option value="CA02 - Manchpur">CA02 - Manchpur</option>
                <option value="CA03 - Gulzar Cinema">CA03 - Gulzar Cinema</option>
                <option value="CA04 - Arniua Maujpur">CA04 - Arniua Maujpur</option>
                <option value="CA05 - Bazipur">CA05 - Bazipur</option>
                <option value="Outside CA">Outside CA</option>
            </select>
            <button id="applyFilter" class="btn btn-primary">Show GIS Tagging</button>

        </div>
    </div>
    <div class="card-body">
        <div class="loadpanel"></div>
        <p id="distance"></p>
        <p style="display:none" id="details">Active AMR: <label id="activeamr"></label> &nbsp;| Active Vayudut: <label id="activevayudut"></label> &nbsp;| AMR No Reception: <lable id="inactiveamr"></lable> &nbsp;| Vayudut No Reception: <lable id="inactivevayu"></lable> </p>
        <div id="map"></div>
    </div>
</div>


<script>
    $(document).ready(function () {
        let map = L.map('map').setView([28.1924017, 77.8829483], 13);
        const loadPanel = $('.loadpanel').dxLoadPanel({
            shadingColor: 'rgba(0,0,0,0.4)',
            position: { of: '.container' },
            visible: false,
            showIndicator: true,
            showPane: true,
            shading: true,
            hideOnOutsideClick: false,
            onShown() {
            },
            onHidden() {
                /* showEmployeeInfo(employee);*/
            },
        }).dxLoadPanel('instance');
        $("#applyFilter").on("click", function () {
            loadPanel.show();
            var startDate = $("#startDate").val();
            var endDate = $("#endDate").val();
            var dataToSend = {
                name: $('#name').val(),
                age: $('#age').val()
            };
            if (!startDate || !endDate) {

                alert("Please select both start and end dates.");

                return;

            }
            console.log("Applying filter: Start Date = " + startDate + ", End Date = " + endDate);
            const dropdown = document.getElementById("myDropdown");
            const selectedValue = dropdown.value;
            $.ajax({
                type: 'POST',                    // HTTP method
                url: '/GIS/CallToMap',    // Controller URL (replace with actual controller/action)
                data: { startDate: startDate, endDate: endDate, area: selectedValue }, // Data sent as key-value pairs
                success: function (response) {

                    map.remove();

                    // Reinitialize the map
                    map = L.map('map').setView([28.1924017, 77.8829483], 13);// Success callback
                    var missingARMJson = response.missingARMJson;
                    var ActiveAMRJson = response.ActiveAMRJson;
                    var ActiveVayudutJson = response.ActiveVayudutJson;
                    var missingVayudutJson = response.missingVayudutJson;
                    var ActiveAMRCount = response.ActiveAMRCount;
                    var inactiveAMRCount = response.inactiveAMRCount;
                    var ActiveVayudutCount = response.ActiveVayudutCount;
                    var missingVayudutCount = response.missingVayudutCount;
                    var serialNumberToMarker = JSON.parse(response.sr);
                    $('#details').show();
                    $('#activeamr').text(ActiveAMRCount);
                    $('#activevayudut').text(ActiveVayudutCount);
                    $('#inactiveamr').text(inactiveAMRCount);
                    $('#inactivevayu').text(missingVayudutCount);
                   
                    var customIcon = L.icon({
                        iconUrl: 'https://hesmdms.com/assets/images/favicon.ico',
                        iconSize: [12, 12], // size of the icon
                        iconAnchor: [16, 12], // point of the icon which will correspond to marker's location
                        popupAnchor: [0, -12] // point from which the popup should open relative to the iconAnchor
                    });
                     //Add a tile layer to the map
                    //L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    //    maxZoom: 18,
                    //}).addTo(map);
                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        attribution: '© OpenStreetMap contributors'
                    }).addTo(map);

                    // Add Mapbox Satellite tile layer with your access token
                    //L.tileLayer('https://api.mapbox.com/styles/v1/mapbox/satellite-v9/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoiaXRvdWNoc29sdXRpb24iLCJhIjoiY2xqNDhsNnpuMWxhcjNncDl1aXkwampzdSJ9.jJr05JGKmna7OIx8PR71Ow', {
                    //    attribution: '© Mapbox',
                    //    maxZoom: 20,
                    //    tileSize: 512,
                    //    zoomOffset: -1
                    //}).addTo(map);
                    var searchBox = L.control({ position: 'topright' });
                    searchBox.onAdd = function (map) {
                        var div = L.DomUtil.create('div', 'search-box');
                        div.innerHTML = '<input type="text" id="search-input" placeholder="Enter Serial Number">' +
                            '<button id="search-btn">Search</button>';
                        return div;
                    };
                    function createMarkerWithSerial(latlon, serialNumber) {
                        var marker = L.circle(latlon, {
                            color: 'red',
                            fillColor: '#ff0000',
                            fillOpacity: 0.7,
                            radius: 5
                        }).bindTooltip('Serial No: ' + serialNumber + '<br>Lat: ' + latlon[0] + '<br>Lon: ' + latlon[1], { permanent: false }).addTo(map);

                        // Store marker by serial number
                        serialNumberToMarker[serialNumber] = marker;
                    }

                    map.addControl(new L.Control.Fullscreen());
                    searchBox.addTo(map);
                    // Detect when entering or exiting fullscreen
                    map.on('enterFullscreen', function () {
                        console.log('Entered fullscreen mode');
                    });
                    // Array to store the markers
                    var markers = [];
                    var polyline = null; // Variable to store the polyline

                    // Add click event listener to the map
                    map.on('click', function (e) {
                        // Check if it's the third click
                        if (markers.length === 2) {
                            // Clear all markers
                            markers.forEach(function (marker) {
                                map.removeLayer(marker);
                            });
                            markers = [];

                            // Clear the polyline
                            if (polyline) {
                                map.removeLayer(polyline);
                                polyline = null;
                            }

                            // Clear the distance display
                            document.getElementById('distance').innerHTML = '';
                        }

                        // Add a new marker at the clicked location
                        var marker = L.marker(e.latlng).addTo(map)
                            .bindPopup('Lat: ' + e.latlng.lat + '<br>Lon: ' + e.latlng.lng)
                            .openPopup();

                        // Add the new marker to the array
                        markers.push(marker);

                        // If there are two markers, calculate the distance and draw a line between them
                        if (markers.length === 2) {
                            var firstClickLatLng = markers[0].getLatLng();
                            var secondClickLatLng = markers[1].getLatLng();
                            var distance = firstClickLatLng.distanceTo(secondClickLatLng);

                            // Display the distance in meters
                            document.getElementById('distance').innerHTML = 'Distance: ' + distance.toFixed(2) + ' meters';

                            // Draw a line between the two markers
                            polyline = L.polyline([firstClickLatLng, secondClickLatLng], { color: 'blue' }).addTo(map);
                        }
                    });
                    function generateDynamicColor(lat, lon) {
                        // Normalize latitude and longitude to generate color values
                        var r = Math.floor((lat - Math.floor(lat)) * 255); // Red component
                        var g = Math.floor((lon - Math.floor(lon)) * 255); // Green component
                        var b = Math.floor(((lat + lon) - Math.floor(lat + lon)) * 255); // Blue component
                        return 'rgb(' + r + ',' + g + ',' + b + ')'; // Return an RGB color string
                    }

                    fetch('/Images/KhurjaBoundary.kmz')  // Replace with the actual KMZ file path
                        .then(response => response.blob())
                        .then(blob => {
                            JSZip.loadAsync(blob).then(zip => {
                                zip.file(/.kml$/i)[0].async('string').then(kmlText => {
                                    var parser = new DOMParser();
                                    var kml = parser.parseFromString(kmlText, "text/xml");
                                    var geojson = toGeoJSON.kml(kml);  // Convert KML to GeoJSON

                                    // Define different colors based on coordinates or properties


                                    // Add the polygon layer to the map with dynamic colors
                                    L.geoJSON(geojson, {
                                        style: function (feature) {
                                            // Extract the coordinates (assuming it's a Polygon)
                                            var coordinates = feature.geometry.coordinates[0];
                                            var lat = coordinates[0][1];  // Latitude
                                            var lon = coordinates[0][0];  // Longitude
                                            var dynamicColor = generateDynamicColor(lat, lon);

                                            return {
                                                color: dynamicColor,
                                                weight: 2,
                                                fillOpacity: 0.1
                                            };
                                        }
                                    }).addTo(map);
                                });
                            });
                        })
                        .catch(err => console.log(err));
                    // Array of lat/lon points for large circles
                    var largeCircleLocations = JSON.parse(response.ActiveVayudutJson);
                    var markerLocations = JSON.parse(response.missingARMJson);
                    var smallCircleLocations = JSON.parse(response.ActiveAMRJson);
                    var vayu = JSON.parse(response.missingVayudutJson);
                    var boundaryCoordinates = [
                        [28.20496511, 77.8522095253837],
                        [28.2159319691964, 77.8935273164321],
                        [28.282016027817, 77.8744601776456],
                        [28.252132737524, 77.8311929851495],
                        [28.2804019910255, 77.8423435449301],
                    ];

                    // Draw boundary line
                    // var boundary = L.polyline(boundaryCoordinates, { color: 'purple', weight: 3 }).addTo(map);
                    // Create an array to store all large circles and their corresponding data
                    var largeCircles = [];
                    var vayuCircles = [];

                    // Function to create a draggable circle with marker
                    function createDraggableCircle(latlon, radius, color, isVayu = false) {
                        var circle = L.circle(latlon, {
                            color: color,
                            fillColor: color,
                            fillOpacity: 0.5,
                            radius: radius // radius in meters,
                        }).bindTooltip('Vayudut Number:' + latlon[2] + '<br>Lat: ' + latlon[0] + '<br>Lon: ' + latlon[1], { permanent: false }).addTo(map);

                        var draggableMarker = L.marker(latlon, { draggable: true, icon: customIcon }).addTo(map);

                        if (isVayu) {
                            vayuCircles.push({ circle: circle, marker: draggableMarker, lines: [] });
                        } else {
                            largeCircles.push({ circle: circle, marker: draggableMarker, lines: [] });
                        }

                        // Event listener to update circle position and redraw lines on marker drag
                        draggableMarker.on('dragend', function (e) {
                            var newLatLng = e.target.getLatLng();
                            circle.setLatLng(newLatLng);
                            drawLinesToMarkers(circle, newLatLng, isVayu);
                        });

                        // Initial drawing of lines to markers
                        drawLinesToMarkers(circle, latlon, isVayu);
                    }

                    // Function to draw lines from the circle's center to markers and small circles within its radius
                    function drawLinesToMarkers(circle, centerLatLng, isVayu) {
                        var radius = circle.getRadius();
                        var centerLatLngObj = L.latLng(centerLatLng); // Ensure centerLatLng is an L.latLng object

                        // Remove previous lines
                        if (isVayu) {
                            vayuCircles.forEach(function (vc) {
                                if (vc.circle === circle) {
                                    vc.lines.forEach(function (line) {
                                        map.removeLayer(line);
                                    });
                                    vc.lines = [];
                                }
                            });
                        } else {
                            largeCircles.forEach(function (lc) {
                                if (lc.circle === circle) {
                                    lc.lines.forEach(function (line) {
                                        map.removeLayer(line);
                                    });
                                    lc.lines = [];
                                }
                            });
                        }

                        // Loop through marker locations and draw lines for those within the circle's radius
                        markerLocations.forEach(function (latlon) {
                            var markerLatLng = L.latLng(latlon);
                            var distance = centerLatLngObj.distanceTo(markerLatLng); // Use distanceTo method correctly

                            if (distance <= radius) {
                                // Draw a line from the circle center to the marker
                                var line = L.polyline([centerLatLngObj, markerLatLng], { color: 'blue' }).addTo(map);

                                // Save the line to the appropriate circle for future removal
                                if (isVayu) {
                                    vayuCircles.forEach(function (vc) {
                                        if (vc.circle === circle) {
                                            vc.lines.push(line);
                                        }
                                    });
                                } else {
                                    largeCircles.forEach(function (lc) {
                                        if (lc.circle === circle) {
                                            lc.lines.push(line);
                                        }
                                    });
                                }
                            }
                        });

                        // Loop through small circle locations and draw lines for those within the circle's radius
                        //smallCircleLocations.forEach(function (latlon) {
                        //    var smallLatLng = L.latLng(latlon);
                        //    var distance = centerLatLngObj.distanceTo(smallLatLng);
                        //    var serialNumber = index + 1;  // Assign serial numbers 1 to 8
                        //    if (distance <= radius) {
                        //        var line = L.polyline([centerLatLngObj, smallLatLng], { color: 'green' }).addTo(map);

                        //        // Save the line to the appropriate circle for future removal
                        //        if (isVayu) {
                        //            vayuCircles.forEach(function (vc) {
                        //                if (vc.circle === circle) {
                        //                    vc.lines.push(line);
                        //                }
                        //            });
                        //        } else {
                        //            largeCircles.forEach(function (lc) {
                        //                if (lc.circle === circle) {
                        //                    lc.lines.push(line);
                        //                }
                        //            });
                        //        }
                        //    }
                        //});
                        smallCircleLocations.forEach(function (latlon, index) {
                            var smallLatLng = L.latLng(latlon);
                            var distance = centerLatLngObj.distanceTo(smallLatLng);
                            var serialNumber = index + 1;  // Assign serial numbers 1 to 8

                            if (distance <= radius) {
                                var line = L.polyline([centerLatLngObj, smallLatLng], { color: 'green' }).addTo(map);

                                // Create a marker for each small circle and bind the serial number
                                //createMarkerWithSerial([smallLatLng.lat, smallLatLng.lng], serialNumber);

                                // Save the line to the appropriate circle for future removal
                                if (isVayu) {
                                    vayuCircles.forEach(function (vc) {
                                        if (vc.circle === circle) {
                                            vc.lines.push(line);
                                        }
                                    });
                                } else {
                                    largeCircles.forEach(function (lc) {
                                        if (lc.circle === circle) {
                                            lc.lines.push(line);
                                        }
                                    });
                                }
                            }
                        });

                    }
                    var crossIcon = L.icon({
                        iconUrl: 'https://img.icons8.com/emoji/48/000000/cross-mark-emoji.png',
                        iconSize: [20, 20], // size of the icon
                        iconAnchor: [10, 10], // point of the icon which will correspond to marker's location
                        popupAnchor: [0, -10] // point from which the popup should open relative to the iconAnchor
                    });
                    // Draw large circles
                    largeCircleLocations.forEach(function (latlon) {
                        createDraggableCircle(latlon, 150, 'blue');
                    });

                    // Draw small circles inside the large ones
                    smallCircleLocations.forEach(function (latlon) {
                        L.circle(latlon, {
                            color: 'green',
                            fillColor: '#0f3',
                            fillOpacity: 0.7,
                            radius: 5 // radius in meters for smaller circle
                        }).bindTooltip('AMR Number:' + latlon[2] + '<br>Lat: ' + latlon[0] + '<br>Lon: ' + latlon[1], { permanent: false }).addTo(map);
                    });
                    // Add cross markers with tooltips
                    markerLocations.forEach(function (latlon) {
                        L.circle(latlon, {
                            color: 'red',
                            fillColor: '#ff0000',
                            fillOpacity: 0.7,
                            radius: 5 // radius in meters for smaller circle
                        }).bindTooltip('AMR Number:' + latlon[2] + '<br>Lat: ' + latlon[0] + '<br>Lon: ' + latlon[1], { permanent: false }).addTo(map);
                    });


                    vayu.forEach(function (latlon) {
                        createDraggableCircle(latlon, 150, 'yellow', true);
                    });
                    document.getElementById('search-btn').addEventListener('click', function () {
                        var searchInput = document.getElementById('search-input').value.trim();  // Get the input
                        var found = false;

                        // Loop through smallCircleLocations to find the serial number
                        smallCircleLocations.forEach(function (latlon) {
                            var serialNumber = latlon[2];  // Serial number is at the 3rd position

                            if (serialNumber == searchInput) {
                                // If serial number matches, zoom to the marker's position
                                var latlng = L.latLng(latlon[0], latlon[1]);  // Latitude and Longitude

                                map.setView(latlng, 25);  // Zoom to level 16
                                found = true;

                                // Add a blinking effect to the marker
                                var smallCircleMarker = L.circle(latlng, {
                                    color: 'green',
                                    fillColor: '#0f3',
                                    fillOpacity: 0.7,
                                    radius: 5
                                }).addTo(map);

                                smallCircleMarker.bindTooltip('AMR Number: ' + serialNumber + '<br>Lat: ' + latlng.lat + '<br>Lon: ' + latlng.lng).openTooltip();

                                var blink = true;
                                var originalColor = smallCircleMarker.options.fillColor || '#0f3';
                                var blinkInterval = setInterval(function () {
                                    smallCircleMarker.setStyle({ fillColor: blink ? '#0000FF' : originalColor });
                                    blink = !blink;
                                }, 500);  // Toggle every 0.5 seconds

                                // Stop blinking after 5 seconds
                                setTimeout(function () {
                                    clearInterval(blinkInterval);
                                    smallCircleMarker.setStyle({ fillColor: originalColor });  // Restore the original color
                                }, 5000);
                            }
                        });
                        markerLocations.forEach(function (latlon) {
                            var serialNumber = latlon[2];  // Serial number is at the 3rd position

                            if (serialNumber == searchInput) {
                                // If serial number matches, zoom to the marker's position
                                var latlng = L.latLng(latlon[0], latlon[1]);  // Latitude and Longitude

                                map.setView(latlng, 25);  // Zoom to level 16
                                found = true;

                                // Add a blinking effect to the marker
                                var markerL = L.circle(latlng, {
                                    color: 'red',
                                    fillColor: '#0f3',
                                    fillOpacity: 0.7,
                                    radius: 5
                                }).addTo(map);

                                markerL.bindTooltip('AMR Number: ' + serialNumber + '<br>Lat: ' + latlng.lat + '<br>Lon: ' + latlng.lng).openTooltip();

                                var blink = true;
                                var originalColor = markerL.options.fillColor || '#0f3';
                                var blinkInterval = setInterval(function () {
                                    markerL.setStyle({ fillColor: blink ? '#0000FF' : originalColor });
                                    blink = !blink;
                                }, 500);  // Toggle every 0.5 seconds

                                // Stop blinking after 5 seconds
                                setTimeout(function () {
                                    clearInterval(blinkInterval);
                                    markerL.setStyle({ fillColor: originalColor });  // Restore the original color
                                }, 5000);
                            }
                        });
                        largeCircleLocations.forEach(function (latlon) {
                            var serialNumber = latlon[2];  // Serial number is at the 3rd position

                            if (serialNumber == searchInput) {
                                // If serial number matches, zoom to the marker's position
                                var latlng = L.latLng(latlon[0], latlon[1]);  // Latitude and Longitude

                                map.setView(latlng, 25);  // Zoom to level 16
                                found = true;

                                // Add a blinking effect to the marker
                                var markerL = createDraggableCircle(latlon, 150, 'blue');
                            }
                        });
                        const legend = L.control({ position: 'bottomright' });
                        legend.onAdd = function (map) {
                            const div = L.DomUtil.create('div', 'legend');
                            div.innerHTML = `
                <div class="legend-item">
                    <div class="legend-color" style="background: rgba(0,0,255,0.2); border: 2px solid blue;"></div>
                    <span>Functional Gateway</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: rgba(255,255,0,0.2); border: 2px solid yellow;"></div>
                    <span>Non-functional Gateway</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: green;"></div>
                    <span>Operational AMR</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: red;"></div>
                    <span>Non-operational AMR</span>
                </div>
            `;
                            return div;
                        };
                        legend.addTo(map);
                      
                        if (!found) {
                            alert('Marker with Serial Number ' + searchInput + ' not found.');
                        }
                    });


                    loadPanel.hide();

                },
                error: function (xhr, status, error) { // Error callback
                    console.error('Error occurred: ' + error);
                }
            });
        });


    });
</script>
