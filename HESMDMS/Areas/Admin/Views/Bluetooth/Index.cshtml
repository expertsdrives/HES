
@{
    Layout = null;
}
@{
    ViewBag.Title = "Bluetooth Connection";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BLE Write and Read Response Example</title>
</head>
<body>
    <button onclick="connectAndSendData()">Connect and Send Data</button>
    <div>
        <textarea id="log" rows="10" style="width: 100%;"></textarea>
    </div>

    <script>
        let device;
        let server;
        let writeCharacteristic;
        let notifyCharacteristic;

        async function connectAndSendData() {
            try {
                logMessage('Requesting Bluetooth Device...');
                device = await navigator.bluetooth.requestDevice({
                    acceptAllDevices: true, // Replace with filters as needed
                    optionalServices: ['0783b03e-8535-b5a0-7140-a304d2495cb7'] // Replace with your service UUID
                });

                logMessage('Connecting to GATT Server...');
                server = await device.gatt.connect();

                logMessage('Getting Service...');
                const service = await server.getPrimaryService('0783b03e-8535-b5a0-7140-a304d2495cb7'); // Replace with your service UUID

                logMessage('Getting Characteristics...');
                writeCharacteristic = await service.getCharacteristic('0783b03e-8535-b5a0-7140-a304d2495cba'); // Replace with write characteristic UUID
                notifyCharacteristic = await service.getCharacteristic('0783b03e-8535-b5a0-7140-a304d2495cb8'); // Replace with notify characteristic UUID

                logMessage('Setup complete. Ready for communication.');

                // Write hexadecimal data
                const hexData = new Uint8Array([0x00, 0x01, 0x00, 0x10, 0x00, 0x01, 0x00, 0x1f,
                    0x60, 0x1d, 0xa1, 0x09, 0x06, 0x07, 0x60, 0x85,
                    0x74, 0x05, 0x08, 0x01, 0x01, 0xbe, 0x10, 0x04,
                    0x0e, 0x01, 0x00, 0x00, 0x00, 0x06, 0x5f, 0x1f,
                    0x04, 0x00, 0x62, 0x1e, 0x5d, 0xff, 0xff]);

                await writeCharacteristic.writeValue(hexData);

                logMessage('Hexadecimal data sent successfully.');

                // Enable notifications for response
                await notifyCharacteristic.startNotifications();
                notifyCharacteristic.addEventListener('characteristicvaluechanged', handleNotifications);
                logMessage('Notifications enabled for characteristic: ' + notifyCharacteristic.uuid);
            } catch (error) {
                console.error('Error:', error);
                logMessage('Error: ' + error);
            }
        }

        function handleNotifications(event) {
            const value = event.target.value;
            const uint8Array = new Uint8Array(value.buffer);

            let hexString = '';
            for (let i = 0; i < uint8Array.length; i++) {
                let hex = uint8Array[i].toString(16).toUpperCase();
                hex = hex.length === 1 ? '0' + hex : hex; // Ensure two digits
                hexString += hex + ' ';
            }

            logMessage('Received notification (Hex): ' + hexString.trim());
        }

        function logMessage(message) {
            const log = document.getElementById('log');
            log.value += message + '\n';
            log.scrollTop = log.scrollHeight;
        }
    </script>
</body>
</html>

@*<h2>Bluetooth Connection</h2>
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>DLMS OBIS Code via Web Bluetooth</title>
    </head>
    <body>
        <button onclick="connectAndSendDLMS()">Connect and Send DLMS Command</button>
        <button onclick="disconnect()">Disconnect</button>
        <div>
            <textarea id="log" rows="10" style="width: 100%;"></textarea>
        </div>

        <script>
            let device;
            let server;
            let writeCharacteristic;
            let notifyCharacteristic;

            async function connectAndSendDLMS() {
                try {
                    logMessage('Requesting Bluetooth Device...');
                    device = await navigator.bluetooth.requestDevice({
                        acceptAllDevices: true, // Replace with filters as needed
                        optionalServices: ['0783b03e-8535-b5a0-7140-a304d2495cb7'] // Replace with your service UUID
                    });

                    logMessage('Connecting to GATT Server...');
                    server = await device.gatt.connect();

                    logMessage('Getting Service...');
                    const service = await server.getPrimaryService('0783b03e-8535-b5a0-7140-a304d2495cb7'); // Replace with your service UUID

                    logMessage('Getting Characteristics...');
                    writeCharacteristic = await service.getCharacteristic('0783b03e-8535-b5a0-7140-a304d2495cba'); // Replace with write characteristic UUID
                    notifyCharacteristic = await service.getCharacteristic('0783b03e-8535-b5a0-7140-a304d2495cb8'); // Replace with notify characteristic UUID

                    logMessage('Setup complete. Ready for communication.');

                    // Enable notifications for response
                    await notifyCharacteristic.startNotifications();
                    notifyCharacteristic.addEventListener('characteristicvaluechanged', handleNotifications);
                    logMessage('Notifications enabled for characteristic: ' + notifyCharacteristic.uuid);

                    // Send SNRM request
                    const snrmRequest = new Uint8Array([0x7E, 0xA0, 0x07, 0x03, 0x21, 0x93, 0x5F, 0x7E]);
                    await writeCharacteristic.writeValue(snrmRequest);
                    logMessage('SNRM request sent.');

                    // Wait for UA response (simplified, in real case should be handled properly)
                    await delay(2000);

                    // Send AARQ request
                    const aarqRequest = new Uint8Array([0x7E, 0xA0, 0x16, 0x03, 0x21, 0x93, 0x5F, 0x10, 0x16, 0x30, 0x14, 0xA1, 0x09, 0x06, 0x07, 0x60, 0x85, 0x74, 0x05, 0x08, 0x01, 0x01, 0xBE, 0x10, 0x04, 0x0E, 0x1F, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0xE1, 0x00, 0x00, 0x00, 0x7E]);
                    await writeCharacteristic.writeValue(aarqRequest);
                    logMessage('AARQ request sent.');

                    // Wait for AARE response (simplified, in real case should be handled properly)
                    await delay(2000);

                    // Send DLMS OBIS code
                    const dlmsOBISCode = "1.0.12.7.0.255"; // Replace with your DLMS OBIS code
                    const hdlcFrame = convertToHDLC(dlmsOBISCode);
                    await writeCharacteristic.writeValue(new Uint8Array(hdlcFrame));
                    logMessage('DLMS OBIS code sent successfully.');

                } catch (error) {
                    console.error('Error:', error);
                    logMessage('Error: ' + error);
                }
            }

            function handleNotifications(event) {
                const value = event.target.value;
                const textDecoder = new TextDecoder();
                const decodedValue = textDecoder.decode(value);

                logMessage('Received notification: ' + decodedValue);
            }

            async function disconnect() {
                if (device && device.gatt.connected) {
                    await device.gatt.disconnect();
                    logMessage('Disconnected from Bluetooth device.');
                }
            }

            function logMessage(message) {
                const log = document.getElementById('log');
                log.value += message + '\n';
                log.scrollTop = log.scrollHeight;
            }

            function convertToHDLC(data) {
                // Example HDLC framing function (replace with your implementation)
                const startFlag = 0x7E; // HDLC start flag
                const endFlag = 0x7E; // HDLC end flag

                let framedData = [startFlag];
                for (let i = 0; i < data.length; i++) {
                    framedData.push(data.charCodeAt(i));
                }
                framedData.push(endFlag);

                return framedData;
            }

            function delay(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
            }
        </script>
    </body>
    </html>*@



@*<script>
        let device;
        let characteristic;

        // Scripts/bluetooth.js
        //async function connectBluetooth() {
        //    const serviceUuid = '0783b03e-8535-b5a0-7140-a304d2495cb7'; // Replace with your service UUID
        //    const writeCharacteristicUuid = '0783b03e-8535-b5a0-7140-a304d2495cba'; // Replace with your write characteristic UUID
        //    const readCharacteristicUuid = '0783b03e-8535-b5a0-7140-a304d2495cb8'; // Replace with your read characteristic UUID

        //    try {
        //        const device = await navigator.bluetooth.requestDevice({
        //            filters: [{ services: [serviceUuid] }],
        //            optionalServices: [serviceUuid] // Ensure optional services are included
        //        });

        //        const server = await device.gatt.connect();
        //        const service = await server.getPrimaryService(serviceUuid);
        //        const writeCharacteristic = await service.getCharacteristic(writeCharacteristicUuid);
        //        const readCharacteristic = await service.getCharacteristic(readCharacteristicUuid);

        //        // Function to write and read a value
        //        async function writeAndRead(value) {
        //            try {
        //                await writeCharacteristic.writeValue(value);
        //                console.log('Write successful');
        //                const readValue = await readCharacteristic.readValue();
        //                const decodedValue = new Uint8Array(readValue.buffer);
        //                return decodedValue;
        //            } catch (error) {
        //                console.error('Error during write/read operation:', error);
        //                alert(`Error during write/read operation: ${error.message}`);
        //            }
        //        }

        //        // AARQ REQUEST
        //        //const aarqrequest = new uint8array([
        //        //    0x00, 0x01, 0x00, 0x10, 0x00, 0x01, 0x00, 0x1f,
        //        //    0x60, 0x1d, 0xa1, 0x09, 0x06, 0x07, 0x60, 0x85,
        //        //    0x74, 0x05, 0x08, 0x01, 0x01, 0xbe, 0x10, 0x04,
        //        //    0x0e, 0x01, 0x00, 0x00, 0x00, 0x06, 0x5f, 0x1f,
        //        //    0x04, 0x00, 0x62, 0x1e, 0x5d, 0xff, 0xff
        //        //]);
        //        //let response = await writeAndRead(aarqRequest);
        //        //if (response) {
        //        //    console.log('AARQ REQUEST Response:', response);
        //        //    alert(`AARQ REQUEST Response: ${Array.from(response).map(b => b.toString(16).padStart(2, '0')).join(' ')}`);
        //        //}

        //        // Date and Time
        //        const dateTime = new Uint8Array([
        //            0x00, 0x01, 0x00, 0x10, 0x00, 0x01, 0x00, 0x0D,
        //            0xC0, 0x01, 0xC1, 0x00, 0x08, 0x00, 0x00, 0x01,
        //            0x00, 0x00, 0xFF, 0x02, 0x00
        //        ]);
        //        response = await writeAndRead(dateTime);
        //        if (response) {
        //            console.log('Date and Time Response:', response);
        //            alert(`Date and Time Response: ${Array.from(response).map(b => b.toString(16).padStart(2, '0')).join(' ')}`);
        //        }

        //        // Serial Number
        //        const serialNumber = new Uint8Array([
        //            0x00, 0x01, 0x00, 0x10, 0x00, 0x01, 0x00, 0x0D,
        //            0xC0, 0x01, 0xC1, 0x00, 0x01, 0x00, 0x00, 0x60,
        //            0x01, 0x00, 0xFF, 0x02, 0x00
        //        ]);
        //        response = await writeAndRead(serialNumber);
        //        if (response) {
        //            console.log('Serial Number Response:', response);
        //            alert(`Serial Number Response: ${Array.from(response).map(b => b.toString(16).padStart(2, '0')).join(' ')}`);
        //        }

        //    } catch (error) {
        //        console.error('Error connecting to Bluetooth device:', error);
        //        alert(`Error connecting to Bluetooth device: ${error.message}`);
        //    }
        //}
        // Scripts/bluetooth.js

        // Scripts/bluetooth.js

        // Scripts/bluetooth.js

        //async function connectBluetooth() {
        //    const serviceUuid = '0783b03e-8535-b5a0-7140-a304d2495cb7'; // Service UUID
        //    const writeCharacteristicUuid = '0783b03e-8535-b5a0-7140-a304d2495cba'; // Write Characteristic UUID

        //    try {
        //        const device = await navigator.bluetooth.requestDevice({
        //            filters: [{ services: [serviceUuid] }]
        //        });

        //        const server = await device.gatt.connect();
        //        const service = await server.getPrimaryService(serviceUuid);

        //        // Get the write characteristic
        //        const writeCharacteristic = await service.getCharacteristic(writeCharacteristicUuid);

        //        if (writeCharacteristic.properties.write || writeCharacteristic.properties.writeWithoutResponse) {
        //            // AARQ REQUEST command to be sent
        //            const aarqRequest = new Uint8Array([
        //                0x00, 0x01, 0x00, 0x10, 0x00, 0x01, 0x00, 0x1F,
        //                0x60, 0x1D, 0xA1, 0x09, 0x06, 0x07, 0x60, 0x85,
        //                0x74, 0x05, 0x08, 0x01, 0x01, 0xBE, 0x10, 0x04,
        //                0x0E, 0x01, 0x00, 0x00, 0x00, 0x06, 0x5F, 0x1F,
        //                0x04, 0x00, 0x62, 0x1E, 0x5D, 0xFF, 0xFF
        //            ]);

        //            try {
        //                await writeCharacteristic.writeValue(aarqRequest);
        //                console.log('Write successful for AARQ REQUEST');
        //                alert('AARQ REQUEST command sent successfully');
        //            } catch (writeError) {
        //                console.error(`Error writing to characteristic ${writeCharacteristic.uuid}:`, writeError);
        //                alert(`Error writing to characteristic ${writeCharacteristic.uuid}: ${writeError.message}`);
        //            }
        //        } else {
        //            console.error(`Characteristic ${writeCharacteristic.uuid} does not support writing`);
        //            alert(`Characteristic ${writeCharacteristic.uuid} does not support writing`);
        //            return;
        //        }

        //        // Find a characteristic that supports reading
        //        const characteristics = await service.getCharacteristics();
        //        let readCharacteristic = null;

        //        for (const characteristic of characteristics) {
        //            if (characteristic.properties.read) {
        //                readCharacteristic = characteristic;
        //                console.log(`Found readable characteristic: ${characteristic.uuid}`);
        //                break; // Use the first readable characteristic found
        //            }
        //        }

        //        if (readCharacteristic) {
        //            try {
        //                const value = await readCharacteristic.readValue();
        //                const hexString = Array.from(new Uint8Array(value.buffer))
        //                    .map(b => b.toString(16).padStart(2, '0'))
        //                    .join(' ');
        //                console.log(`Read value from characteristic ${readCharacteristic.uuid}: ${hexString}`);
        //                alert(`Read value from characteristic ${readCharacteristic.uuid}: ${hexString}`);
        //            } catch (readError) {
        //                console.error(`Error reading from characteristic ${readCharacteristic.uuid}:`, readError);
        //                alert(`Error reading from characteristic ${readCharacteristic.uuid}: ${readError.message}`);
        //            }
        //        } else {
        //            console.error('No readable characteristic found.');
        //            alert('No readable characteristic found.');
        //        }

        //    } catch (error) {
        //        console.error('Error connecting to Bluetooth device:', error);
        //        alert(`Error connecting to Bluetooth device: ${error.message}`);
        //    }
        //}


    </script>*@
