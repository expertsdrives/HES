@*<!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>BLE Write and Read Response Example</title>
    </head>
    <body>
        <button onclick="connectAndSendData()">Connect and Send Data</button>
        <div>
            <textarea id="log" rows="10" style="width: 100%;"></textarea>
        </div>

        <script>
            let device;
            let server;
            let writeCharacteristic;
            let notifyCharacteristic;

            async function connectAndSendData() {
                try {
                    logMessage('Requesting Bluetooth Device...');
                    device = await navigator.bluetooth.requestDevice({
                        acceptAllDevices: true, // Replace with filters as needed
                        optionalServices: ['0783b03e-8535-b5a0-7140-a304d2495cb7'] // Replace with your service UUID
                    });

                    logMessage('Connecting to GATT Server...');
                    server = await device.gatt.connect();

                    logMessage('Getting Service...');
                    const service = await server.getPrimaryService('0783b03e-8535-b5a0-7140-a304d2495cb7'); // Replace with your service UUID

                    logMessage('Getting Characteristics...');
                    writeCharacteristic = await service.getCharacteristic('0783b03e-8535-b5a0-7140-a304d2495cba'); // Replace with write characteristic UUID
                    notifyCharacteristic = await service.getCharacteristic('0783b03e-8535-b5a0-7140-a304d2495cb8'); // Replace with notify characteristic UUID

                    logMessage('Setup complete. Ready for communication.');

                    // Write hexadecimal data
                    const hexData = new Uint8Array([0x7E, 0xA0, 0x07, 0x03, 0x21, 0x93, 0x0F, 0x01, 0x7E]);

                    await writeCharacteristic.writeValue(hexData);

                    logMessage('Hexadecimal data sent successfully.');

                    // Enable notifications for response
                    await notifyCharacteristic.startNotifications();
                    notifyCharacteristic.addEventListener('characteristicvaluechanged', handleNotifications);
                    logMessage('Notifications enabled for characteristic: ' + notifyCharacteristic.uuid);
                } catch (error) {
                    console.error('Error:', error);
                    logMessage('Error: ' + error);
                }
            }

            function handleNotifications(event) {
                const value = event.target.value;
                const uint8Array = new Uint8Array(value.buffer);

                let hexString = '';
                for (let i = 0; i < uint8Array.length; i++) {
                    let hex = uint8Array[i].toString(16).toUpperCase();
                    hex = hex.length === 1 ? '0' + hex : hex; // Ensure two digits
                    hexString += hex + ' ';
                }

                logMessage('Received notification (Hex): ' + hexString.trim());
            }

            function logMessage(message) {
                const log = document.getElementById('log');
                log.value += message + '\n';
                log.scrollTop = log.scrollHeight;
            }
        </script>
    </body>
    </html>*@
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BLE Write and Read Response Example</title>
</head>
<body>
    <button onclick="connectDevice()">Connect</button>
    <button onclick="sendSRN()">Send SRN Command</button>
    <button onclick="sendAARQ()">Send AARQ Request</button>
    <button onclick="sendOBISCode()">Send OBIS Code</button>
    <button onclick="disconnectDevice()">Disconnect</button>
    <div>
        <textarea id="log" rows="10" style="width: 100%;"></textarea>
    </div>

    <script>
        let device;
        let server;
        let writeCharacteristic;
        let notifyCharacteristic;

        async function connectDevice() {
            try {
                logMessage('Requesting Bluetooth Device...');
                device = await navigator.bluetooth.requestDevice({
                    acceptAllDevices: true,
                    optionalServices: ['0783b03e-8535-b5a0-7140-a304d2495cb7']
                });

                logMessage('Connecting to GATT Server...');
                server = await device.gatt.connect();

                const service = await server.getPrimaryService('0783b03e-8535-b5a0-7140-a304d2495cb7');
                writeCharacteristic = await service.getCharacteristic('0783b03e-8535-b5a0-7140-a304d2495cba');
                notifyCharacteristic = await service.getCharacteristic('0783b03e-8535-b5a0-7140-a304d2495cb8');

                await notifyCharacteristic.startNotifications();
                notifyCharacteristic.addEventListener('characteristicvaluechanged', handleNotifications);
                logMessage('Notifications enabled. Ready for communication.');
            } catch (error) {
                console.error('Error:', error);
                logMessage('Error: ' + error);
            }
        }

        async function sendSRN() {
            try {
                const hexData = new Uint8Array([0x7E, 0xA0, 0x07, 0x03, 0x21, 0x93, 0x0F, 0x01, 0x7E]);
                await writeCharacteristic.writeValue(hexData);
                logMessage('SRN Command sent successfully.');
            } catch (error) {
                console.error('Error:', error);
                logMessage('Error: ' + error);
            }
        }

        async function sendAARQ() {
            try {
                const hexData = new Uint8Array([0x7E, 0xA0, 0x2B, 0x03, 0x21, 0x10, 0xFB, 0xAF, 0xE6, 0xE6, 0x00, 0x60, 0x1D, 0xA1, 0x09, 0x06, 0x07, 0x60, 0x85, 0x74, 0x05, 0x08, 0x01, 0x01, 0xBE, 0x10, 0x04, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x06, 0x5F, 0x1F, 0x04, 0x00, 0x62, 0x1E, 0x5D, 0xFF, 0xFF, 0x88, 0x55, 0x7E]);
                await writeCharacteristic.writeValue(hexData);
                sendOBISCode();
                logMessage('AARQ Request sent successfully.');
            } catch (error) {
                console.error('Error:', error);
                logMessage('Error: ' + error);
            }
        }

        async function sendOBISCode() {
            try {
                // Example HEX data for OBIS code in HDLC frame, specific encoding needed per actual use case
                const obisHexData = new Uint8Array([0x7E, 0xA0, 0x07, 0x03, 0x21, 0x12, 0x07, 0x00, 0xFF, 0x7E]);
                await writeCharacteristic.writeValue(obisHexData);
                logMessage('OBIS Code sent successfully.');
            } catch (error) {
                console.error('Error:', error);
                logMessage('Error: ' + error);
            }
        }

        async function disconnectDevice() {
            try {
                await device.gatt.disconnect();
                logMessage('Device disconnected.');
            } catch (error) {
                console.error('Error:', error);
                logMessage('Error: ' + error);
            }
        }

        function handleNotifications(event) {
            const value = event.target.value;
            const uint8Array = new Uint8Array(value.buffer);
            let hexString = '';
            for (let i = 0; i < uint8Array.length; i++) {
                let hex = uint8Array[i].toString(16).toUpperCase();
                hex = hex.length === 1 ? '0' + hex : hex; // Ensure two digits
                hexString += hex + ' ';
            }
            logMessage('Received notification (Hex): ' + hexString.trim());
        }

        function logMessage(message) {
            const log = document.getElementById('log');
            log.value += message + '\n';
            log.scrollTop = log.scrollHeight;
        }
    </script>
</body>
</html>
